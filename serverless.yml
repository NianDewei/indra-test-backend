org: niandev  # serverless org name
app: sls-app-dev  # serverless app name
service: appointment-service-indra

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 512
  timeout: 30
  architecture: arm64

  environment:
    DYNAMODB_TABLE: ${self:service}-appointments-${self:provider.stage}
    SNS_TOPIC_ARN: !Ref AppointmentTopic
    SQS_PE_URL: !GetAtt AppointmentQueuePE.QueueUrl
    SQS_CL_URL: !GetAtt AppointmentQueueCL.QueueUrl
    RESPONSE_SQS_URL: !GetAtt ResponseQueue.QueueUrl
    EVENT_BUS_NAME: !Ref AppointmentEventBus
    MYSQL_PE: ${ssm:/DATABASE/TEST/PERU}
    MYSQL_CL: ${ssm:/DATABASE/TEST/CHILE}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
        - ssm:GetParameters
      Resource:
        - arn:aws:ssm:us-east-1:449131150005:parameter/PERU
        - arn:aws:ssm:us-east-1:449131150005:parameter/CHILE
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - !GetAtt AppointmentTable.Arn
        - !Sub ${AppointmentTable.Arn}/index/*
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: !Ref AppointmentTopic
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource:
        - !GetAtt AppointmentQueuePE.Arn
        - !GetAtt AppointmentQueueCL.Arn
        - !GetAtt ResponseQueue.Arn
    - Effect: Allow
      Action:
        - events:PutEvents
      Resource: !GetAtt AppointmentEventBus.Arn
    - Effect: Allow
      Action:
        - rds:*
      Resource:
        - arn:aws:rds:us-east-1:449131150005:db:dbappointmentpe # change to instance name
        - arn:aws:rds:us-east-1:449131150005:db:dbappointmentcl # change to instance name

plugins:
  - serverless-offline

custom:
  build:
    bundle: true
    minify: true
    sourcemap: true
    exclude: ["aws-sdk"]
    target: "node20"
    concurrency: 10
    watch:
      pattern: ["src/**/*.ts"]
  serverless-offline:
    useChildProcesses: true
    httpPort: 3000
    environment:
      IS_OFFLINE: true
      NODE_ENV: development

functions:
  appointment:
    handler: src/appointments/infrastructure/adapters/handlers/appointment.handler
    events:
      - http:
          path: /appointments
          method: post
          cors: true
      - http:
          path: /appointments/{insuredId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                insuredId: true
      - sqs:
          arn: !GetAtt ResponseQueue.Arn
          batchSize: 1

  appointmentPE:
    handler: src/appointments/infrastructure/adapters/handlers/appointment_pe.handler
    events:
      - sqs:
          arn: !GetAtt AppointmentQueuePE.Arn
          batchSize: 1

  appointmentCL:
    handler: src/appointments/infrastructure/adapters/handlers/appointment_cl.handler
    events:
      - sqs:
          arn: !GetAtt AppointmentQueueCL.Arn
          batchSize: 1

  swagger:
    handler: src/appointments/infrastructure/adapters/handlers/swagger.handler
    events:
      - http:
          path: /swagger
          method: get
          cors: true
      - http:
          path: /swagger.json
          method: get
          cors: true

resources:
  Resources:
    AppointmentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: insuredId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: insuredId-index
            KeySchema:
              - AttributeName: insuredId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    AppointmentTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-appointments-topic-${self:provider.stage}

    AppointmentSubscriptionPE:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref AppointmentTopic
        Protocol: sqs
        Endpoint: !GetAtt AppointmentQueuePE.Arn
        FilterPolicy:
          countryISO:
            - PE

    AppointmentSubscriptionCL:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref AppointmentTopic
        Protocol: sqs
        Endpoint: !GetAtt AppointmentQueueCL.Arn
        FilterPolicy:
          countryISO:
            - CL

    AppointmentQueuePE:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-appointments-queue-pe-${self:provider.stage}
        VisibilityTimeout: 60

    AppointmentQueueCL:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-appointments-queue-cl-${self:provider.stage}
        VisibilityTimeout: 60

    AppointmentQueuePEPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: "sqs:SendMessage"
              Resource: !GetAtt AppointmentQueuePE.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref AppointmentTopic
        Queues:
          - !Ref AppointmentQueuePE

    AppointmentQueueCLPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: "sqs:SendMessage"
              Resource: !GetAtt AppointmentQueueCL.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref AppointmentTopic
        Queues:
          - !Ref AppointmentQueueCL

    ResponseQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-response-queue-${self:provider.stage}
        VisibilityTimeout: 60

    AppointmentEventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${self:service}-eventbus-${self:provider.stage}

    AppointmentEventRule:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: !Ref AppointmentEventBus
        EventPattern:
          source:
            - medical-appointment
          detail-type:
            - appointment.completed
        Targets:
          - Arn: !GetAtt ResponseQueue.Arn
            Id: responseQueue

    EventBridgeToSQSPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action: "sqs:SendMessage"
              Resource: !GetAtt ResponseQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt AppointmentEventRule.Arn
        Queues:
          - !Ref ResponseQueue
